pi_digits = "14159265358979323846264338327950288419716939937510" \
            "58209749445923078164062862089986280348253421170679" \
            "82148086513282306647093844609550582231725359408128" \
            "48111745028410270193852110555964462294895493038196" \
            "44288109756659334461284756482337867831652712019091" \
            "45648566923460348610454326648213393607260249141273" \
            "72458700660631558817488152092096282925409171536436" \
            "78925903600113305305488204665213841469519415116094" \
            "33057270365759591953092186117381932611793105118548" \
            "07446237996274956735188575272489122793818301194912" \
            "98336733624406566430860213949463952247371907021798" \
            "60943702770539217176293176752384674818467669405132"

# 隣り合う2桁の数字の部分列を取り出す関数
def extract_2_digit_substrings(digits)
  substrings = []
  (0...digits.size - 1).each do |i|
    substrings << digits[i, 2]
  end
  substrings
end

# 隣り合う2桁の数字の部分列を取得
substrings = extract_2_digit_substrings(pi_digits)

# 各数字列の出現回数を数える
frequency = Hash.new(0)
substrings.each { |substring| frequency[substring] += 1 }

# 最も多く出現する2桁数字を求める
most_frequent = frequency.max_by { |_key, value| value }

puts most_frequent.first